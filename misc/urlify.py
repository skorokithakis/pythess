# coding: utf-8
import re

__author__ = "Alex Musayev"
__license__ = "MIT"
__status__ = "Development"
__url__ = "http://github.com/dreikanter/python-urlify"
__version_info__ = (0, 0, 1)
__version__ = ".".join(map(str, __version_info__))


UBERMAP = {
    # Latin:
    ord("À"): "A",
    ord("Á"): "A",
    ord("Â"): "A",
    ord("Ã"): "A",
    ord("Ä"): "A",
    ord("Å"): "A",
    ord("Æ"): "AE",
    ord("Ç"): "C",
    ord("È"): "E",
    ord("É"): "E",
    ord("Ê"): "E",
    ord("Ë"): "E",
    ord("Ì"): "I",
    ord("Í"): "I",
    ord("Î"): "I",
    ord("Ï"): "I",
    ord("Ð"): "D",
    ord("Ñ"): "N",
    ord("Ò"): "O",
    ord("Ó"): "O",
    ord("Ô"): "O",
    ord("Õ"): "O",
    ord("Ö"): "O",
    ord("Ő"): "O",
    ord("Ø"): "O",
    ord("Ù"): "U",
    ord("Ú"): "U",
    ord("Û"): "U",
    ord("Ü"): "U",
    ord("Ű"): "U",
    ord("Ý"): "Y",
    ord("Þ"): "TH",
    ord("ß"): "ss",
    ord("à"): "a",
    ord("á"): "a",
    ord("â"): "a",
    ord("ã"): "a",
    ord("ä"): "a",
    ord("å"): "a",
    ord("æ"): "ae",
    ord("ç"): "c",
    ord("è"): "e",
    ord("é"): "e",
    ord("ê"): "e",
    ord("ë"): "e",
    ord("ì"): "i",
    ord("í"): "i",
    ord("î"): "i",
    ord("ï"): "i",
    ord("ð"): "d",
    ord("ñ"): "n",
    ord("ò"): "o",
    ord("ó"): "o",
    ord("ô"): "o",
    ord("õ"): "o",
    ord("ö"): "o",
    ord("ő"): "o",
    ord("ø"): "o",
    ord("ù"): "u",
    ord("ú"): "u",
    ord("û"): "u",
    ord("ü"): "u",
    ord("ű"): "u",
    ord("ý"): "y",
    ord("þ"): "th",
    ord("ÿ"): "y",
    ord("©"): "c",
    # Greek:
    ord("α"): "a",
    ord("β"): "b",
    ord("γ"): "g",
    ord("δ"): "d",
    ord("ε"): "e",
    ord("ζ"): "z",
    ord("η"): "h",
    ord("θ"): "8",
    ord("ι"): "i",
    ord("κ"): "k",
    ord("λ"): "l",
    ord("μ"): "m",
    ord("ν"): "n",
    ord("ξ"): "3",
    ord("ο"): "o",
    ord("π"): "p",
    ord("ρ"): "r",
    ord("σ"): "s",
    ord("τ"): "t",
    ord("υ"): "y",
    ord("φ"): "f",
    ord("χ"): "x",
    ord("ψ"): "ps",
    ord("ω"): "w",
    ord("ά"): "a",
    ord("έ"): "e",
    ord("ί"): "i",
    ord("ό"): "o",
    ord("ύ"): "y",
    ord("ή"): "h",
    ord("ώ"): "w",
    ord("ς"): "s",
    ord("ϊ"): "i",
    ord("ΰ"): "y",
    ord("ϋ"): "y",
    ord("ΐ"): "i",
    ord("Α"): "A",
    ord("Β"): "B",
    ord("Γ"): "G",
    ord("Δ"): "D",
    ord("Ε"): "E",
    ord("Ζ"): "Z",
    ord("Η"): "H",
    ord("Θ"): "8",
    ord("Ι"): "I",
    ord("Κ"): "K",
    ord("Λ"): "L",
    ord("Μ"): "M",
    ord("Ν"): "N",
    ord("Ξ"): "3",
    ord("Ο"): "O",
    ord("Π"): "P",
    ord("Ρ"): "R",
    ord("Σ"): "S",
    ord("Τ"): "T",
    ord("Υ"): "Y",
    ord("Φ"): "F",
    ord("Χ"): "X",
    ord("Ψ"): "PS",
    ord("Ω"): "W",
    ord("Ά"): "A",
    ord("Έ"): "E",
    ord("Ί"): "I",
    ord("Ό"): "O",
    ord("Ύ"): "Y",
    ord("Ή"): "H",
    ord("Ώ"): "W",
    ord("Ϊ"): "I",
    ord("Ϋ"): "Y",
    # Turkish:
    ord("ş"): "s",
    ord("Ş"): "S",
    ord("ı"): "i",
    ord("İ"): "I",
    ord("ç"): "c",
    ord("Ç"): "C",
    ord("ü"): "u",
    ord("Ü"): "U",
    ord("ö"): "o",
    ord("Ö"): "O",
    ord("ğ"): "g",
    ord("Ğ"): "G",
    # Russian:
    ord("а"): "a",
    ord("б"): "b",
    ord("в"): "v",
    ord("г"): "g",
    ord("д"): "d",
    ord("е"): "e",
    ord("ё"): "yo",
    ord("ж"): "zh",
    ord("з"): "z",
    ord("и"): "i",
    ord("й"): "j",
    ord("к"): "k",
    ord("л"): "l",
    ord("м"): "m",
    ord("н"): "n",
    ord("о"): "o",
    ord("п"): "p",
    ord("р"): "r",
    ord("с"): "s",
    ord("т"): "t",
    ord("у"): "u",
    ord("ф"): "f",
    ord("х"): "h",
    ord("ц"): "c",
    ord("ч"): "ch",
    ord("ш"): "sh",
    ord("щ"): "sch",
    ord("ъ"): "",
    ord("ы"): "y",
    ord("ь"): "",
    ord("э"): "e",
    ord("ю"): "yu",
    ord("я"): "ya",
    ord("А"): "A",
    ord("Б"): "B",
    ord("В"): "V",
    ord("Г"): "G",
    ord("Д"): "D",
    ord("Е"): "E",
    ord("Ё"): "Yo",
    ord("Ж"): "Zh",
    ord("З"): "Z",
    ord("И"): "I",
    ord("Й"): "J",
    ord("К"): "K",
    ord("Л"): "L",
    ord("М"): "M",
    ord("Н"): "N",
    ord("О"): "O",
    ord("П"): "P",
    ord("Р"): "R",
    ord("С"): "S",
    ord("Т"): "T",
    ord("У"): "U",
    ord("Ф"): "F",
    ord("Х"): "H",
    ord("Ц"): "C",
    ord("Ч"): "Ch",
    ord("Ш"): "Sh",
    ord("Щ"): "Sch",
    ord("Ъ"): "",
    ord("Ы"): "Y",
    ord("Ь"): "",
    ord("Э"): "E",
    ord("Ю"): "Yu",
    ord("Я"): "Ya",
    # Ukrainian:
    ord("Є"): "Ye",
    ord("І"): "I",
    ord("Ї"): "Yi",
    ord("Ґ"): "G",
    ord("є"): "ye",
    ord("і"): "i",
    ord("ї"): "yi",
    ord("ґ"): "g",
    # Czech:
    ord("č"): "c",
    ord("ď"): "d",
    ord("ě"): "e",
    ord("ň"): "n",
    ord("ř"): "r",
    ord("š"): "s",
    ord("ť"): "t",
    ord("ů"): "u",
    ord("ž"): "z",
    ord("Č"): "C",
    ord("Ď"): "D",
    ord("Ě"): "E",
    ord("Ň"): "N",
    ord("Ř"): "R",
    ord("Š"): "S",
    ord("Ť"): "T",
    ord("Ů"): "U",
    ord("Ž"): "Z",
    # Polish:
    ord("ą"): "a",
    ord("ć"): "c",
    ord("ę"): "e",
    ord("ł"): "l",
    ord("ń"): "n",
    ord("ó"): "o",
    ord("ś"): "s",
    ord("ź"): "z",
    ord("ż"): "z",
    ord("Ą"): "A",
    ord("Ć"): "C",
    ord("Ę"): "e",
    ord("Ł"): "L",
    ord("Ń"): "N",
    ord("Ó"): "o",
    ord("Ś"): "S",
    ord("Ź"): "Z",
    ord("Ż"): "Z",
    # Latvian:
    ord("ā"): "a",
    ord("č"): "c",
    ord("ē"): "e",
    ord("ģ"): "g",
    ord("ī"): "i",
    ord("ķ"): "k",
    ord("ļ"): "l",
    ord("ņ"): "n",
    ord("š"): "s",
    ord("ū"): "u",
    ord("ž"): "z",
    ord("Ā"): "A",
    ord("Č"): "C",
    ord("Ē"): "E",
    ord("Ģ"): "G",
    ord("Ī"): "i",
    ord("Ķ"): "k",
    ord("Ļ"): "L",
    ord("Ņ"): "N",
    ord("Š"): "S",
    ord("Ū"): "u",
    ord("Ž"): "Z",
}

EXCLUSIONS = [
    "a",
    "an",
    "as",
    "at",
    "before",
    "but",
    "by",
    "for",
    "from",
    "is",
    "in",
    "into",
    "like",
    "of",
    "off",
    "on",
    "onto",
    "per",
    "since",
    "than",
    "the",
    "this",
    "that",
    "up",
    "via",
    "with",
]

_base = re.compile(r"[a-zA-Z\d\s-]+")
_space = re.compile(r"[\s_\-]+")


def urlify(text, exclude=EXCLUSIONS, ext_map={}):
    UBERMAP.update(ext_map)
    mapchar = lambda c: c if _base.match(c) else UBERMAP.get(ord(c), "")  # noqa
    result = "".join(map(mapchar, text)).lower()
    exclude = re.compile("|".join([r"\b%s\b" % word for word in exclude]))
    return _space.sub("-", exclude.sub("", result)).strip("-")
